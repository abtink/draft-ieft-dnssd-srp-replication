<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc category="std" submissionType="IETF" docName="draft-lemon-srp-replication-02" ipr="trust200902"
     xmlns:xi="http://www.w3.org/2001/XInclude" version="3"
     scripts="Common,Latin" sortRefs="false"
     symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <front>
    <title abbrev='DNS-SD SRP Replication'>
      Automatic Replication of DNS-SD Service Registration Protocol Zones
    </title>
    <author initials="T" surname="Lemon" fullname="Ted Lemon">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <region>California</region>
          <code>95014</code>
          <country>US</country>
        </postal>
        <email>mellon@fugue.com</email>
      </address>
    </author>

    <date year='2022' month='March' day='4'/>
    <area>Internet</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <abstract>
      <t>This document describes a protocol that can be used for ad-hoc replication of a DNS zone by multiple servers where a single primary DNS authoritative server is not available and the use of stable storage is not desirable.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction">
      <name>Introduction</name>

      <t>The DNS-SD Service Registration Protocol provides a way for network services to update a DNS zone with DNS-SD information. SRP uses unicast DNS Updates, rather than multicast DNS, to advertise services. This has several advantages over multicast DNS:</t>
      <ul>
        <li>Reduces reliance on multicast</li>
        <li>Reduces traffic to devices providing services, which may be constrained devices operating on battery power</li>
        <li>Allows the advertisement of services on one network link to consumers of such services on a different network link</li>
      </ul>

      <section anchor="alternatives-for-maintaining-srp-state">
        <name>Alternatives for maintaining SRP state</name>

        <section anchor="primary-authoritative-dns-service">
          <name>Primary authoritative DNS service</name>
          <t>Ideally, SRP updates a primary authoritative DNS server for a particular zone. This DNS server acts as the sole source of truth for names within the DNS zone in which SRP services are published. Redundancy is provided by secondary DNS servers, if needed. However, this approach has some drawbacks.</t>

          <t>First, it requires 100% availability on the part of a DNS primary authoritative server for the zone. If the primary server is not available for some period of time, new services appearing on the network cannot be registered until primary authoritative service is restored.</t>

          <t>The second drawback is that there is no automatic method for managing DNS authoritative service. This means that such a service requires an operator to set it up. What it means to set up such a service is that the following capabilities are provided:</t>
          <ul>
            <li>An host must be available to act as a primary authoritative DNS server</li>
            <li>The zone advertised by that server must be delegated, so that the local resolver can successfully answer queries in that zone</li>
            <li>The local resolver must be able to provide local browsing domain advertisements [RFC6763 section 11].</li>
          </ul>

        </section>
        <section anchor="multicast-dns-advertising-proxy">
          <name>Multicast DNS Advertising Proxy</name>
          <t>
            An existing alternative to the use of DNS authoritative services for advertising SRP
            registrations the advertising proxy [draft-tlsc-advertising-proxy]. An advertising
            proxy advertises the contents of the SRP update zone using multicast DNS on links on
            which the need for such advertisements is anticipated. This works well for stub
            networks [draft-lemon-stub-networks], where services advertised on the stub network
            must be visible both on the stub network and on the adjacent infrastructure network,
            but do not generally need to be discoverable on other networks.
          </t>

          <t>
            One drawback of the advertising proxy model, however, is that there is no shared
            database from which to advertise services registered by SRP. As a consequence, some
            of the guarantees provided by SRP, particularly first come, first served naming
            [draft-ietf-dnssd-srp]. Because advertising proxies are set up automatically on an
            ad-hoc basis, coordination between advertising proxies is not present, which means
            that if two devices claim the same name, but register with different SRP servers,
            the conflict is not detected until the service is advertised using mDNS. In
            practice, this results in frequent renaming of services, which means that consumers
            of services need to carefully follow each service that they use as the name changes
            over time.
          </t>

          <t>An additional drawback is that, from the perspective of the SRP client, SRP service is not unified: SRP servers tend to come and go, and whenever the SRP service with which a particular client has registered goes offline, the client has to notice that this has happened, discover a new SRP server, and re-register, or else it becomes unreachable.</t>

        </section>
        <section anchor="srp-replication">
          <name>SRP Replication</name>

          <t>This document describes a replication mechanism which eliminates the need for a single authoritative source of truth, as in the Primary Authoritative DNS model, while eliminating the drawbacks of the Advertising Proxy model. SRP Replication servers discover each other automatically. Each replication server maintains a copy of the SRP zone which is kept up to date on a best-effort basis.</t>

          <t>SRP Replication has several benefits:</t>
          <ul>
            <li>As long as one SRP replication partner remains online at all times, SRP state is maintained when individual SRP replication partners go offline</li>
            <li>Name collisions when SRP clients change servers are avoided</li>
            <li>SRP service on a stub network can appear as an anycast service, so that SRP clients do not see an apparent change in servers and re-register when the server with which they most recently registered goes offline</li>
          </ul>

        </section>
      </section>
    </section>
    <section anchor="implementation">
      <name>Implementation</name>

      <t>SRP Replication relies on the fact that any given client is always registering with exactly one SRP server at any given time. This means that when an SRP server receives an SRP update from a client, it can be sure that no other SRP server has a more recent version of that SRP client's registration. Consequently, that SRP server can behave as if it is the source of truth for that client's registration, and other SRP servers can safely assume that any data they have about the client that is less recent can be replaced with the new registration data.</t>

      <section anchor="naming-of-a-common-service-zone">
        <name>Naming of a common service zone</name>

        <t>In order for SRP replication partners to replicate a zone, they must agree upon a common name for the zone. We will describe two mechanisms for agreeing on a common zone here.</t>

        <section anchor="zone-name-based-on-network-name">
          <name>Zone name based on network name</name>

          <t>Network names aren't guaranteed to be unique, but tend to be unique for any given site. In the case of ad-hoc (permissionless) SRP-based service, such as an advertising proxy or an authoritative service using a locally-served zone [https://www.iana.org/assignments/locally-served-dns-zones/locally-served-dns-zones.xhtml], because the DNS zone name isn't required to be globally unique, a zone name based on the network name is an easy solution to generating a unique zone name.</t>

          <t>When generating a zone name based on a network name, the zone name could be based on a locally configured global zone name, e.g. 'example.com'. It could be based on a locally-managed locally-served name, e.g. 'home.arpa'. Or it could be based on an unmanaged locally-served name, for which we propose to use the root name 'local.arpa.' For the rest of this section we will assume that the specific setting determines which of these domains will be used, and refer to whichever domain that is as DOMAIN.</t>

          <t>For zone names based on the network name, the network type should be used as a differentiator, in case there are two different local network types with the same name. So, for example, 'WiFi.DOMAIN.'</t>

          <section anchor="zone-name-based-on-wifi-ssid">
            <name>Zone name based on WiFi SSID</name>

            <t>If the zone being represented is a WiFi network, then the zone name for the network should be constructed using the WiFi SSID followed by 'WiFi.DOMAIN'.  For example, if the SSID is "Example Home" then the zone name would be 'Example Home.WiFi.DOMAIN.' Note that spaces and special characters are allowed in domain names.</t>

          </section>
          <section anchor="zone-name-based-on-thread-network-name">
            <name>Zone name based on Thread network name</name>

            <t>If the zone being represented is a Thread [Thread] network, then the zone name for the network should be constructed using the Thread network name. For example, if the Thread network name is "openthread" then the zone name would be 'openthread.thread.DOMAIN.'</t>

          </section>
        </section>
        <section anchor="zone-name-based-on-local-configuration">
          <name>Zone name based on local configuration</name>

          <t>The above examples assume that it makes sense for each separate subnet to be its own separate zone. However, since SRP guarantees name uniqueness using the first-come, first-served mechanism, it doesn't rely on mDNS's guarantee of per-link uniqueness. Consequently, it is not required that an SRP zone be constrained to the set of services advertised on a single link. For this reason, when it is possible to know that some set of links are all managed by the same set of SRP replication partners, and a name is known for that set of links, that name can be used. To avoid possible collisions, the subdomain 'srp' is used to indicate that this zone is an SRP zone. So in this case the link name would be the locally-known shared name, followed by 'srp.DOMAIN.'</t>

          <t>An example of such a scenario would be Apple's HomeKit, in which all HomeKit accessories, regardless of which home network link they are attached to, all are shared in the same namespace. Suppose the HomeKit home's name is "Example Home". In such a situation, the domain name 'Example Home.srp.DOMAIN' could be used.</t>

        </section>
        <section anchor="zone-name-based-on-dns-sd-discovery">
          <name>Zone name based on DNS-SD discovery</name>

          <t>Another option for naming the local SRP Replication zone would be to use DNS-SD advertisements. This is particularly useful since each SRP replication partner advertises itself using DNS-SD, so there is a convenient place to put this information. To advertise a zone name based on DNS-SD discovery, the SRP replication partner should add two fields to the TXT record of the service instance. The first field is the domain field: 'domain=name'. This indicates a proposed SRP replication zone name. The second is the join field. If 'join=yes' then other SRP replication servers are encouraged to use the domain name that appears in the domain field rather than creating a new domain.</t>

        </section>
      </section>

      <section anchor="advertising-ones-own-replication-service">
        <name>Advertising one's own replication service</name>

        <t>An SRP replication service advertises its replication service after it is finishes the partner discovery phase as specified in <xref target="partner-discovery-phase"/>.</t>

        <t>SRP replication service is advertised using DNS-SD [RFC6763]. The service name is '_srpl-tls._tcp'. Each SRP replication partner should have its own hostname, which when combined with the service instance name and the local DNS-SD domain name will produce a service instance name, for example 'example-host._srpl-tls._tcp.local.' The domain under which the service instance name appears will be 'local' for mDNS, and will be whatever domain is used for service registration in the case of a non-mDNS local DNS-SD service.</t>

        <t>SRP replication uses <xref target="RFC7858">DNS port 853</xref> and is based on <xref target="RFC8490">DNS Stateful Operations</xref>. Therefore, the SRV record for the example we've given would be:</t>

        <t>example-host._srpl-tls._tcp.local. IN SRV 0 0 853 example-host.local.</t>

        <t>The TXT record for SRP replication advertises the following fields:</t>
        <dl>
          <dt>did</dt><dd> dataset ID as a 64-bit number encoded as hexadecimal ASCII. The dataset ID is used by SRP servers to establish a common SRP dataset for a domain as described in <xref target="dataset-id"/>.</dd>
          <dt>join</dt><dd>'yes' or 'no'. Indicates whether other SRP replication servers are invited to join in replicating the dataset.</dd>
          <dt>pid</dt><dd>partner ID as a 64-bit number encoded as hexadecimal ASCII as described in <xref target="partner-id"/>.</dd>
          <dt>dn</dt><dd>the domain name that this dataset is intended to represent</dd>
        </dl>

        <t>So in our example the TXT record might look like this:</t>

        <t>\031dn=openthread.thread.home.arpa.\020did=eb5bb51919a15cec\020pid=2cde2bed200126af\008join=yes</t>

        <t>(Note that each name/value pair in the TXT record is length-encoded, so the '\031`, the two '\020', and the '\008' are the lengths of the name/value pairs.)</t>

      </section>
      <section anchor="discovering-other-replication-services">
        <name>Discovering other replication services</name>

        <t>SRP Replication is a cooperative process. In order to ensure cooperation between SRP replication partners on a link, it is necessary that each replication partner be aware of other potential partners. This is accomplished by maintaining a continuous browse for services of the service type "_srpl-tls._tcp".</t>

        <t>An SRP Replication Partner MUST maintain an ongoing DNS-SD browse on the service name '_srpl-tls._tcp' within the local browsing domain. The ongoing browse will produce two different types of events: 'add' events and 'remove' events. When the browse is started, it should produce an 'add' event for every SRP replication partner currently present on the network, including the partner that is doing the browsing. Whenever a partner goes offline, a 'remove' event should be produced. 'remove' events are not guaranteed, however.</t>

        <t>When a new service is added, the SRP partner checks to see if it is in a compatible domain. If the SRP partner has a domain to advertise, it compares that domain to the domain advertised in the added service instance: if they are not the same, then this instance is not a candidate for connection, and should be ignored.</t>
      </section>

      <section anchor="partner-discovery-phase">
        <name>Partner discovery phase</name>
        <t>When a partner starts SRP Replication, it enters discovery phase. It picks a random discovery time interval uniformly selected from range MIN_PARNTER_DISCOVERY_INTERVAL up to MAX_PARTNER_DISCOVERY_INTERVAL. The recommended minimum and maximum value is 4 and 7.5 seconds.</t>

        <t>The partner spends the selected interval to discover partners to sync and domain name if it does not have one. It can itself start advertising replication service and start acting as an SRP server only after this discover time is passed and it either successfully synchronized or attempted to synchronize and failed for at least NUM_DISCOVERY_SYNC_ATTAMPETS times with each partner it discovered during the discovery interval.</t>

        <t>If no other partner is discovered by end of the interval, the SRP partner determines that it is the only or the first partner. It then generates the Dataset ID using the process described in <xref target="dataset-id"/>. If the SRP partner does not have a domain name then it MUST also select a zone name using one of the methods mentioned previously in <xref target="naming-of-a-common-service-zone"/>. It can then start advertising the replication service as mentioned in <xref target="advertising-ones-own-replication-service"/>.</t>

        <t>If the SRP partner does not have a domain to advertise and is therefore willing to join an existing domain, when it discovers a partner it checks to see if the TXT record for the service indicates that joining is permitted. If so, the SRP partner adopts the provided domain name.</t>
      </section>

      <section anchor="partner-id">
        <name>Partner ID</name>

        <t>The partner ID is a 64-bit number associated with an SRP replication partner. Upon staring SRP replication operation, the partner generates a random ID using a high-quality random number generator [RFC4086]. The partner ID does not need to be persisted over SRP replication restarts. If partner restarts SRP replication operation it MUST select a new random ID.</t>

        <t>With ID being randomly generated 64-bit number, the likelihood of ID conflict is small. However, if an SRP partner discovers another partner using the same ID, the partner restarts SRP replication operation which trigger it to pick a new random ID.</t>
      </section>

      <section anchor="dataset-id">
        <name>Dataset ID</name>

        <t>The dataset ID is a 64-bit number, generated by the first partner to offer that dataset. There should always be exactly one dataset ID per domain, but the dataset ID has a separate purpose: it represents the set of data that is being replicated by a set of cooperating SRP replication partners. This data is then offered under the agreed-upon domain, but it's possible that there might be several sets of SRP replication partners that agree to replicate a particular domain, and then some event occurs which renders these partners visible to each other. When this happens, the independent sets of partners must converge on a single dataset. This is done using the dataset ID.</t>

        <t>When more than one dataset ID is present for a particular domain, the mechanism below is used to select an ID as the preferred ID. The SRP replication partners that are currently replicating a dataset with a non-preferred dataset ID will have to abandon that dataset and join together in replicating the preferred dataset.</t>

        <t>If there are two dataset IDs, the one that is numerically larger in the sense as defined in serial number arithmetic <xref target="RFC1982"/> is preferred. If there are multiple IDs, again the ID that is numerically largest is preferred. However, using the serial number comparison with three or more IDs, it is possible though unlikely that the largest value may not be well-defined. For example, it is possible to have three IDs each being larger (in serial number sense) than another one. In such a situation where the largest in serial number sense is not well-defined, the ID that is largest in the normal numerical comparison sense is preferred.</t>

        <t>If an SRP partner determines that it is the first partner to offer the dataset, it generates the dataset ID. SRP partners MUST persist the last used dataset ID or the highest (most significant byte or MSB) of the ID associated with same domain in non-volatile memory. When generated a new dataset ID, partner increment  the MSB of last used ID to use as MSB of new ID and populates the lower 56-bit randomly using a high-quality random number generator [RFC4086]. If there is no previously saved ID, then the entire 64-bit ID is generated randomly.</t>
      </section>

      <section anchor="discovering-the-addresses-of-partners">
        <name>Discovering the addresses of partners</name>

        <t>When a partner is discovered, two new ongoing mDNS queries are started on the hostname indicated in the SRV record of the partner: one for A records, and one for AAAA records. Each time an address 'add' event is seen, either for an 'A' record or an 'AAAA' record, the partner adds the address to the list of addresses belonging to that partner.</t>

      </section>
      <section anchor="establishing-communication-with-a-replication-partner">
        <name>Establishing Communication with a replication partner</name>

        <t>When an address is added to a partner's address list, the partner first checks to see if the address is one of its own addresses. If so, then the partner is marked "me", and no connection is attempted to it. This is somewhat safer than comparing hostnames, since a hostname collision can result in renaming.</t>

        <t>If the partner is not marked 'me', then the partner checks to see if it has an existing connection to that partner. If it does not, then it checks to see whether it has disabled outgoing connections to that partner. If not, then it determines whether it should initiate a connection on the new address.</t>

        <t>While a partner is in discovery phase as described in <xref target="partner-discovery-phase"/> it initiates connection with the other discovered partners. While in this phase the partner does not yet advertise SRP replication service so other partners cannot discover it over DNS-SD. If the partner is not in discover phase then partner IDs are used to determine which partner should initiate the connection. The partner with numerically larger ID in the sense as defined in serial number arithmetic <xref target="RFC1982"/> initiates connection with the one with smaller ID.</t>

        <t>When a connection fails and if there are multiple addresses associated with partner, the connecting partner  advances to the next address in the list. If there are no remaining addresses, the partner sets a timer for RECONNECT_INTERVAL seconds. When this timer expires, it starts again at the beginning of the list and attempts to connect to the first address, iterating again across the list until a connection succeeds or it runs out of addresses.</t>

        <t>Additionally, when an address is added, it is checked against the list of unidentified incoming connections. If a match is found, and the partner is marked "me," then the unidentified connection is removed from the list and dropped. Otherwise, it is attributed to the matching partner, and the protocol is started at the point of receiving an incoming connection.</t>

      </section>
      <section anchor="incoming-connections">
        <name>Incoming connections</name>

        <t>When an incoming connection is received, it is checked against the partner list based on the source address of the incoming connection. If the address appears on the list of addresses for a partner, then the connection is attributed to that partner. If there is already an existing connection with the same partner, the existing connection will be marked as stable and can closed.</t>

      </section>
      <section anchor="initial-synchronization">
        <name>Initial synchronization</name>

        <t>The connecting partner begins the session by sending a session message which includes its partner ID and also indicating whether or not it is a "new partner" and still in discovery phase. The receiving partner waits to receive such a message. If the message indicates that the connecting partner is a "new partner", the connection is accepted. Otherwise, the receiving partner checks the partner IDs as described in <xref target="establishing-communication-with-a-replication-partner" /> to validate that the its partner ID is numerically smaller (in the sense as defined in serial number arithmetic <xref target="RFC1982"/>) than the connecting partner's ID. If the connection survives the comparison, then the partner sends a response to the session message and waits for the connecting partner to request a list of update candidates.</t>

        <t>The connecting partner waits for a response to the initial session message, and when it is received, requests that the server send candidates.</t>

        <section anchor="sending-candidates">
          <name>Sending candidates</name>

          <t>When a partner receives a "send candidates" message that it is expecting to receive, it generates a candidate list from the list of known SRP clients. This list includes SRP clients that have registered directly with the partner, and SRP clients that have been received through SRP replication updates. Each candidate contains a hostname, a time offset, and a key identifier.</t>

          <t>The key identifier is computed as follows:</t>

          <sourcecode>
uint32_t key_id(uint8_t *key_data, int key_len) {
  uint32_t key_id = 0;
  for (int i = 0; i &lt; key_data_len; i += 4) {
    key_id += ((key_data[i] &lt;&lt; 24) | (key_data[i + 1] &lt;&lt; 16) |
               (key_data[i + 2] &lt;&lt; 8) | (key_data[i + 3]));
  }
  return key_id;
}
          </sourcecode>

          <t>When a partner receives a candidate message during the synchronization process, it first searches for an SRP registration with a hostname that matches the hostname in the candidate message. It then compares the key ID to the key ID in the candidate message. If the key ID doesn't match, it sends back a candidate response status of "conflict". If the key ID does match, it compares the time provided to the time the existing host entry was received. If the time of the update is later, it sends a "send host" response. If it is earlier or the same, it sends a "continue" response. If there is no matching host entry for the candidate message, the partner sends a "send host" response.</t>

          <t>When a partner receives a candidate response with a status of "send host", it generates a host message, which contains the hostname, the time offset, and the SRP message that was received from the host. The partner then applies the SRP update message as if it had been received directly from the SRP client. The host update time sent by the partner is remembered as the time when the update was received from the client, for the purposes of future synchronization.</t>

          <t>When a partner is finished iterating across its list of candidates, it sends a "send candidates" response.</t>

          <t>When a partner receives a "send candidates" response, if it is the server, it sends its own "send candidates" message, and processes any proposed candidates.</t>

          <t>When a partner that is a server receives a "send candidates" response, it goes into the "routine operation" state. When a partner that is a client sends its "send candidates" response, it goes into the "routine operation" state.</t>

        </section>
      </section>
      <section anchor="routine-operation">
        <name>Routine Operation</name>

        <t>During routine operation, whenever an update is successfully processed from an SRP client, the partner that received that update queues that update to be sent to each partner to which it has a connection, whether server or client. If there are no updates pending to a particular client, the update is sent immediately. Otherwise, it's send when the outstanding update is acknowledged.</t>

        <t>When during routine operation a partner receives a host update from its partner, it immediately applies that update to its local SRP zone. This is based on the assumption that a new update is always more current than a copy of the host information in its database.</t>

      </section>
    </section>

    <section>
      <name>Protocol Details</name>
      <t>The DNS-SD SRP Replication Protocol (henceforth SRPL) is based on <xref target="RFC8490">DNS Stateful Operations</xref>. Each SRP replication partner creates a listener on port 853, the <xref target="RFC7858">DNS-over-TLS</xref> reserved port. This listener can be used for other DNS requests as well.</t>

      <t>Participants in the protocol are partners. To distinguish between partners, the terms "partner" and "remote partner" are used. "Partner" refers to the partner that is communicating or receiving communication. "Remote partner" refers to the other partner. Partners can be clients or servers: a partner that has established a connection to another one is a client; a partner that has received a connection from another one is a server.</t>

      <section>
        <name>DNS Stateful Operations considerations</name>
        <t>DNS Stateful Operations is a DNS per-connection session management protocol. DNS Push session management includes session establishment as well as session maintenance.</t>
        <section>
          <name>DSO Session Establishment</name>
          <t>An DSO session for an SRPL connection can be established either by simply sending the first SRPL message, or by sending a DSO Keepalive message. <xref target="RFC8490" section="5.1"/>.</t>
        </section>
        <section>
          <name>DSO Session maintenance</name>
          <t>DSO sessions can be active or idle. As long as the SRPL protocol is active on a connection, the DSO state of the connection is active. DSO sessions require occasional keepalive messages. The default of fifteen seconds is adequate for SRPL.</t>
          <t>An idle DSO session must persist for long enough that there is a chance for the browse that identifies it to succeed. Therefore, the minimum DSO session inactivity timeout is 2*UNIDENTIFIED_PARTNER_TIMEOUT seconds.</t>
        </section>
      </section>

      <section>
        <name>SRPL Messages</name>

        <t>SRPL uses DSO message format where a message begins with a primary TLV and can contain secondary TLVs with additional information (<xref target="RFC8490" section="5.4"/>). SRPL uses DSO request and response message types. The recipient of a request is expected to send a response message with same primary TLV. SRPL does not define or use any unidirectional DSO message.</t>

        <t>To ensure future compatibility, when processing a received SRPL message, any unrecognized secondary TLV or additional TLV value in the currently defined SRPL TLVs MUST be silently ignored, and the remainder of the message is interpreted and handled as if the unrecognized parts were not present (<xref target="RFC8490" section="5.4.5"/>). However, if an received SRPL message does not follow the required format and policies specified below (for example, it does not include a required secondary TLV or it is received at incorrect time or sent by incorrect partner) it MUST be treated as a "fatal error" and the connection MUST be forcibly aborted immediately as in <xref target="RFC8490" section="5.3.1"/>).</t>

        <t>The SRPL messages and their corresponding primary TLVs used in the SRPL protocol are as follows:</t>
        <section>
          <name>SRPL Session</name>
          <t>DSO-TYPE code: SRPLSession. Introduces the SRPL session. The SRPL session TLV contains the partner ID as an unsigned 64-bit value. SRPL Session requests can optionally include SRPL New Partner TLV as a secondary TLV. The inclusion of the SRPL New Partner TLV indicates whether the partner is a new partner and still in its discovery phase. SRPL Session request MUST only be sent by the partner acting as a client.</t>
          <section>
            <name>SRPL client behavior</name>
            <t>The SRPL Session request is sent by a partner acting as a client to its remote partner once the TLS connection to the partner, acting as a server, has succeeded. The SRPL session message establishes the DSO connection as an SRPL protocol connection. If it is the first DSO message sent by the partner acting as a client, then it also establishes the DSO session.</t>
            <t>When the SRPL partner acting as a client receives a response to its SRPL session message from server, it sends an SRPL Send Candidates request message.</t>
          </section>
          <section>
            <name>SRPL server behavior</name>
            <t>An SRPL partner acting as a server that receives an SRPL Session request checks to see if the SRPL session on which it was received is already established. If so, this is a protocol error, and the SRPL partner MUST drop the connection.</t>
            <t>When the server receives an SRPL Session request, it checks the presence of SRPL New Partner secondary TLV. If this secondary TLV is included in the Session request, then sever sends a Session response. If the SRPL New partner is not present, then the server checks the partner IDs and validates that the its partner ID is numerically smaller (in the sense as defined in serial number arithmetic <xref target="RFC1982"/>) than the client's partner ID from the Session TLV in the request. If the connection survives the ID comparison, then its sends a Session response.</t>
          </section>
        </section>

        <section>
          <name>SRPL Send Candidates</name>
          <t>DSO-TYPE code: SRPLSendCandidates. Requests the remote partner to send its candidates list. The SRPL Send Candidates TLV contains no value. The SRPL Send Candidates message does not include any secondary TLVs. </t>
          <section>
            <name>SRPL client behavior</name>
            <t>An SRPL partner acting as a client MUST send an SRPL Send Candidates request after it has received an SRPL Session response. It MUST NOT send this request at any other time.</t>
            <t>An SRPL partner acting as a client expects to receive an SRPL Send Candidates message after it has received an SRPL Send Candidates response. If it receives an SRPL Send Candidates message at any other time, this is a protocol error, and the SRPL partner should drop its connection to the server.</t>
          </section>
          <section>
            <name>SRPL server behavior</name>
            <t>An SRPL partner acting as a server expects to receive an SRPL Send Candidates request after it has sent an SRPL Session response. If it receives an SRPL Candidates request at any other time, this is a protocol error, and it MUST drop the connection.</t>
            <t>An SRPL partner acting as a server MUST send an SRPL Send Candidates request after it has sent an SRPL Send Candidates response.</t>
            <t>An SRPL partner acting as a server MUST enter the "normal operations" state after receiving an SRPL Send Candidates response from its partner.</t>
          </section>
        </section>

        <section>
          <name>SRPL Candidate</name>
          <t>DSO-TYPE code: SRPLCandidate. Announces the availability of a specific candidate SRP client registration. The SRPL Candidate TLV contains no value.</t>
          <section>
            <name>Required secondary TLVs</name>
            <t>The SRPL Candidate request MUST include the following secondary TLVs: SRPL Hostname, SRPL Time Offset, and SRPL Key ID.</t>
            <t>The SRPL Candidate response MUST include exactly one of the following status TLVs: SRPL Candidate Yes, SRPL Candidate No, or SRPL Conflict. If an SRPL partner receives an SRPL Candidate response which does not contain exactly one of these TLVS, this is a protocol error, and the partner MUST drop the connection.</t>
          </section>
          <section>
            <name>SRPL partner common behavior</name>
            <t>SRPL partners expect to receive SRPL Candidate messages between the time that they have sent an SRPL Send Candidates request message and the time that they have received an SRPL Send Candidates response. If an SRPL Candidate message is received at any other time, this is a protocol error, and the partner MUST drop the connection.</t>
            <t>Partners MUST NOT send SRPL Candidate requests if they have sent any SRPL Candidate or SRPL host requests that have not yet received responses. Partners receiving SRPL Candidate requests when they have not yet responded to an outstanding SRPL Candidate request or SRPL Host request MUST treat this as a protocol failure and drop the connection.</t>
            <t>When a partner receives a valid SRPL Candidate message, it checks its SRP registration database for a host that matches both the SRPL Hostname and SRPL Key ID TLVs. If such a match is not found, the partner sends an SRPL Candidate response that includes the SRPL Candidate Yes secondary TLV.</t>
            <t>If a match is found for the hostname, but the Key ID doesn't match, this is a conflict, and the partner sends an SRPL Candidate response with the SRPL Conflict secondary TLV.</t>
            <t>If a match is found for the hostname, and the key ID matches, then the partner computes the update time of the candidate by subtracting the value of the SRPL Time Offset TLV from the current time in seconds. This computation should be done when the SRPL Candidate message is received to avoid clock skew. If 'candidate update time' - 'local update time' is greater than SRPL_UPDATE_SKEW_WINDOW, then the candidate update is more recent than the current SRP registration. In this case, the partner sends an SRPL Candidate response and includes the SRPL Candidate Yes secondary TLV. The reason for adding in some skew is to account for network transmission delays.</t>
          </section>
        </section>

        <section>
          <name>SRPL Host</name>
          <t>DSO-TYPE code: SRPLHost. Provides the content of a particular SRP client registration. The SRPL Host TLV contains no value.</t>
          <section>
            <name>Required secondary TLVs</name>
            <t>The SRPL Host request MUST include the following secondary TLVs: SRPL Hostname, SRPL Key ID, and one or more SRPL Host Message TLVs. If an SRPL partner receives an SRPL Candidate request that doesn't contain all of these secondary TLVs, this is a protocol error, and the partner MUST drop the connection.</t>
          <t>The SRPL Host request MUST always include at least one SRPL Host Message TLV, which contains the most recent update the SRP server has received for that host. However, in some cases an update for a host may update some, but not all, service instances that reference that host; in this case, the SRPL Host request MUST include all of the previously received SRP updates that would be required to reconstruct the current state of the host registration on the server sending the SRPL Host request. The SRPL Host Message TLVs MUST be included in order based on the time offset they were received and processed on the SRP server starting with the earliest message and ending with most recent one.</t>
          </section>
          <section>
            <name>SRPL partner common behavior during synchronization</name>
            <t>SRPL partners expect to receive either zero or one SRPL Host requests after sending an SRPL Candidate response with a SRPL Candidate Yes secondary TLV. If an SRPL Host request is received at any other time during initial synchronization, this is a protocol error, and the partner MUST drop the connection. The only time that an SRPL Host request would <em>not</em> follow a positive SRPL Candidate response would be when the candidate host entry's lease expired after the SRPL Candidate request was sent but before the SRPL Candidate response was received.</t>
            <t>SRPL partners send SRPL Host requests during synchronization when a valid SRPL Candidate response has been received that includes an SRPL Candidate Yes secondary TLV. The host request is generated based on the current candidate (the one for which the SRPL Candidate request being responded to was send).</t>
          </section>
          <section>
            <name>SRPL partner common behavior during routine operations</name>
            <t>When an SRPL partner during routine operations receives and has successfully validated an SRP update from an SRP client, it MUST send that update to each of its connected partners as an SRPL Host request. If the connection to a particular partner is not busy, and there are no updates already queued to be sent, it MUST send the SRPL Host message immediately. Otherwise, it MUST queue the update to send when possible. The queue MUST be first-in, first-out.</t>
            <t>After an SRPL partner has sent an SRPL Host request to a partner, and before it receives a corresponding SRPL Host response, it MUST NOT send any more SRPL Host messages to that partner.</t>
            <t>When an SRPL partner receives an SRPL Host request during routine operations, it MUST apply it immediately. While it is being applied, it MUST NOT send any other SRPL Host requests to that partner.</t>
            <t>When an SRPL Host request has been successfully applied by an SRPL partner, the partner MUST send an SRPL Host response.</t>
            <t>If an SRPL partner receives an SRPL Host request while another SRPL Host request is being processed, this is a protocol error, and the partner MUST drop the connection to its partner.</t>
          </section>
        </section>
      </section>

      <section>
        <name>DSO Secondary TLVs</name>
        <t>In addition to the Primary TLVs used to send requests between SRPL partners, we define secondary TLVs to carry additional information needed for various SRPL requests.</t>
        <section>
          <name>SRPL Candidate Yes</name>
          <t>DSO-TYPE code: SRPLCandidateYes. It contains no value, just the type length. In an SRPL Candidate response, indicates to the partner that an SRPL Host message for the candidate is wanted and should be sent.</t>
          <t>Appears as a secondary TLV in SRPL Candidate responses. MUST NOT appear in any other SRPL request or response. MUST NOT appear in addition to either SRPL Conflict or SRPL Candidate No secondary TLVs.</t>
        </section>
        <section>
          <name>SRPL Candidate No</name>
          <t>DSO-TYPE code: SRPLCandidateNo. It contains no value, just the type length. In an SRPL Candidate response, indicates to the partner that an SRPL Host message for the candidate is not wanted and should not be sent.</t>
          <t>Appears as a secondary TLV in SRPL Candidate responses. MUST NOT appear in any other SRPL request or response. MUST NOT appear in addition to either SRPL Conflict or SRPL Candidate Yes secondary TLVs.</t>
        </section>
        <section>
          <name>SRPL Conflict</name>
          <t>DSO-TYPE code: SRPLConflict. It contains no value, just the type length. In an SRPL Candidate response, indicates to the partner that an SRPL Host message for the candidate is not wanted and should not be sent. Additionally indicates that the proposed host conflicts with local data. This indication is informative and has no effect on processing.</t>
          <t>Appears as a secondary TLV in SRPL Candidate responses. MUST NOT appear in any other SRPL request or response. MUST NOT appear in addition to either SRPL Candidate Yes or SRPL Candidate No secondary TLVs.</t>
        </section>
        <section>
          <name>SRPL Hostname</name>
          <t>DSO-TYPE code: SRPLHostname. In an SRPL Candidate or SRPL Host request, indicates to the partner the hostname of an SRP registration. The TLV value is the hostname represented in DNS wire format <xref target="RFC1035" section="3.1" sectionFormat="of"/>.</t>
          <t>Required as a secondary TLV in SRPL Candidate and SRPL Host requests. MUST NOT appear in any other SRPL request or response.</t>
        </section>
        <section>
          <name>SRPL Host Message</name>
          <t>DSO-TYPE code: SRPLHostMessage. In an SRPL Host request, conveys four data objects in order:</t>
          <ul>
            <li>the lease time and key lease time returned to the client, represented as two unsigned 32-bit numbers in units of seconds.</li>
            <li>the time offset at which the message was received, represented as a 32-bit unsigned number of seconds. The time offset is computed as the difference between the time when the SRPL Host Message TLV is being constructed for transmission, and the time when the SRP update contained in the SRPL Host Message was received.</li>
            <li>the SRP Update message received from the SRP client. This contains the contents of the message, but not any IP, UDP, TCP or TLS headers that may have encapsulated it.</li>
          </ul>
          <t>The content of the SRPL Host Message is used to update the host on the partner receiving the request. Note that the SRP message being sent can't be modified by the SRPL partner sending it, so in order to validate the message (assuming that the signature includes a nonzero time), the validation process should adjust the current time by the time offset included in the SRPL Time Offset TLV when comparing against the signature time when checking for replay attacks. The computation of the current time of signing should be done when the message is received to avoid clock skew that might result from processing delays.</t>
          <t>Required as a secondary TLV in SRPL Host requests. MUST NOT appear in any other SRPL request or response.</t>
        </section>

        <section>
          <name>SRPL Time Offset</name>
          <t>DSO-TYPE code: SRPLTimeOffset. In an SRPL Candidate request, conveys the difference between the time the SRP update was received from the SRP client and the current time on the partner generating the request, in seconds. The time offset value is represented as unsigned 32-bit value</t>
          <t>Required as a secondary TLV in SRPL Candidate requests. MUST NOT appear in any other SRPL request or response.</t>
        </section>

        <section>
          <name>SRPL Key ID</name>
          <t>DSO-TYPE code: SRPLKeyID. In an SRPL Candidate request, conveys the key ID of the SRP client. The value is an unsigned 32-bit number and calculated as described in <xref target="sending-candidates"/>.</t>
          <t>Required as a secondary TLV in SRPL Candidate requests. MUST NOT appear in any other SRPL request or response.</t>
        </section>

        <section>
          <name>SRPL New Partner</name>
          <t>DSO-TYPE code: SRPLNewPartnter. It contains no value, just the type length. If included in an SRPL Session request, it indicates that the partner is new and still in its discovery phase.</t>
          <t>Can be optionally included as a secondary TLV in SRPL Session requests. MUST NOT appear in any other SRPL request or response.</t>
        </section>

      </section>
    </section>

    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>SRP replication basically relies on the trustworthiness of hosts on the local network. Since SRP itself relies on the same level of trust, SRP replication doesn't make things worse. However, when the option to have a central SRP server is available, that is likely to be more trustworthy.</t>
    </section>

    <section anchor="delegation">
      <name>Delegation of 'local.arpa.'</name>
      <t>In order to be fully functional, the owner of the 'arpa.' zone must add a delegation of 'local.arpa.' in the '.arpa.'
        zone <xref target="RFC3172"/>. This delegation should be set up as was done for 'home.arpa', as a result of the
        specification in <xref target="RFC8375" section="7" sectionFormat="of"/>.</t>
    </section>

    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section>
        <name>'srpl-tls' Service Name</name>
        <t>IANA is requested to add a new entry to the Service Names and Port Numbers
          registry for srpl-tls with a transport type of tcp.  No port number is to be assigned.
          The reference should be to this document, and the Assignee and Contact information should
          reference the authors of this document.  The Description should be as follows:</t>

        <t>Availability of DNS-SD SRP Replication Service for a given domain is advertised using the "_srpl&nbhy;tls._tcp.&lt;domain&gt;." SRV record gives the target host and port where DNS-SD SRP Replication Service is provided for the named domain.</t>
      </section>

      <section>
        <name>DSO TLV type code</name>
        <t>The IANA is requested to add the following entries to the 16-bit DSO Type Code Registry. Each type mnemonic should be replaced with an allocated type code, both in this table and elsewhere in the document. RFC-TBD should be replaced with the name of this document once it becomes an RFC.</t>
        <table>
          <thead>
            <tr>
              <td>Type</td><td>Name</td><td>Early Data</td><td>Status</td><td>Reference</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>SRPLSession</td><td>SRPL Session</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLSendCandidates</td><td>SRPL Send Candidates</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLCandidate</td><td>SRPL Candidate</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLHost</td><td>SRPL Host</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLCandidateYes</td><td>SRPL Candidate Yes</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLCandidateNo</td><td>SRPL Candidate No</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLConflict</td><td>SRPL Conflict</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLHostname</td><td>SRPL Hostname</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLHostMessage</td><td>SRPL Host Message</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLTimeOffset</td><td>SRPL Time Offset</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLKeyID</td><td>SRPL Key ID</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
            <tr>
              <td>SRPLNewPartnter</td><td>SRPL New Partner</td><td>No</td><td>STD</td><td>RFC-TBD</td>
            </tr>
          </tbody>
        </table>
      </section>

      <section>
        <name>Registration and Delegation of 'local.arpa' as a Special-Use Domain Name</name>
        <t>IANA is requested to record the domain name local.arpa.' in the Special-Use Domain Names registry
          <xref target="SUDN"/>. IANA is requested, with the approval of IAB, to implement the delegation requested in
          <xref target="delegation"/>.</t>
          <t>IANA is further requested to add a new entry to the "Transport-Independent Locally-Served Zones" subregistry of the the "Locally-Served DNS Zones" registry <xref target="LSDZ"/>.  The entry will be for the domain local.arpa.' with the description "Ad-hoc DNS-SD Special-Use Domain", listing this document as the reference.</t>
      </section>
    </section>

  </middle>
  <back>
    <references>
      <name>Informative References</name>
    </references>
    <references>
      <name>Normative References</name>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1982.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3172.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8375.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8490.xml"/>
      <reference anchor="SUDN" target="https://www.iana.org/assignments/special-use-domain-names/special-use-domain-names.xhtml">
        <front>
          <title>Special-Use Domain Names Registry</title>
          <author/>
          <date month="July" year="2012"/>
        </front>
      </reference>
      <reference anchor="LSDZ" target="https://www.iana.org/assignments/locally-served-dns-zones/locally-served-dns-zones.xhtml">
        <front>
          <title>Locally-Served DNS Zones Registry</title>
          <author/>
          <date month="July" year="2011"/>
        </front>
      </reference>
    </references>
  </back>
</rfc>
